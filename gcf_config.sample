# This is an INI style configuration file for the GENI Control Framework
# clearinghouse and aggregate manager

# This config is used by gen-certs, gcf-am.py, gcf-ch.py, and gcf-test.py

[global]
# GENI uses URNs to identify experimenters and resources
# The URN format is specified in the GENI AM document available at: http://www.geni.net/
# A URN is of the form: urn:publicid:IDN+<domain>+<type>+<name>
# The base_name variable is where you specify the domain of your CH/AM/Users.
# EG User URNs issued by your CH will be:
# urn:publicid:IDN+<base_name>+user+<user name>
# Similarly for slice
# See below for the aggregate_manager suffix
# Examples include plc//princeton, geni//gpo//gcf, and emulab.net
# base_name is in publicid format. Seee XML1.0 spec.
# Do not use more than one whitespace in a row.
# Avoid:  <>"{}|\^`

base_name=geni//gpo//gcf



# The directory that stores the trusted roots of your CH/AM 
# and those you have federated with
# This can be a relative or absolute path.
rootcadir=~/.gcf/trusted_roots



[clearinghouse]
# Address at which the Clearinghouse should listen. 0.0.0.0 means all interfaces. 
host=127.0.0.1
port=8000

# Path to the key/cert for the clearinghouse as generated by gen-certs
keyfile=~/.gcf/ch-key.pem
certfile=~/.gcf/ch-cert.pem


# Listing of URN/URL pairs of aggregates affiliated with this CH
# format: agg_n = urn, url
# am_1 = urn:publicid:IDN+geni:gpo:gcf:am1+authority+am, http://am1.gpolab.bbn.com:8001
# am_2 = urn:publicid:IDN+geni:gpo:gcf:am2+authority+am, http://am2.gpolab.bbn.com:8001
# am_3 = urn:publicid:IDN+openflow:stanford+authority+am, http://128.89.77.103:443/openflow/gapi/
# am_n = ...

# Begin with our own AM
am_1 = urn:publicid:IDN+geni:gpo:gcf:am1+authority+am, http://localhost:8001

# Duration of User credentials in seconds
user_cred_duration=86400
# Duration of Slice credentials in seconds
slice_duration=7200


[aggregate_manager]
# name is the name of your aggregate manager.  It gets appended to base_name
# when creating a URN for your aggregate manager
# EG: urn:publicid:IDN+<base_name from above>.am1+authority+am
# Resources managed by this AM be named relative to this, eg:
# urn:publicid:IDN+<base_name>:am1+node+myLinuxGCFBox
name=am1

# The Aggregate is by default implemented by ReferenceAggregateManager
# in am2.py or am3.py depending on API version. Specify an alternate
# class here that extends that class for your own implementation.
# If a -D/--delegate option is supplied, that takes precedence
# delegate=gcf.geni.am.am2.ReferenceAggregateManager

# By default (false) the Aggregate API will accept only one connection at the same time
# Set this to 'true' if you want to enable multi-threaded XMLRPC server
# Be sure your (delegate) code is designed to handle multiple requests at the same time (concurrence)
# This option only works for AM Version 3
multithread=false

# Address that the AM listens on
host=127.0.0.1
port=8001
# Cert/key locations
keyfile=~/.gcf/am-key.pem
certfile=~/.gcf/am-cert.pem


[gcf-test]
# Used for testing that the CH and AM are properly running
# This is the user key and cert.
keyfile=~/.gcf/alice-key.pem
certfile=~/.gcf/alice-cert.pem


